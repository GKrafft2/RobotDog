// Generated by gencpp from file unitree_legged_msgs/CheaterState.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_CHEATERSTATE_H
#define UNITREE_LEGGED_MSGS_MESSAGE_CHEATERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct CheaterState_
{
  typedef CheaterState_<ContainerAllocator> Type;

  CheaterState_()
    : orientation()
    , position()
    , vBody()
    , vWorld()
    , omegaBody()
    , acceleration()  {
      orientation.assign(0.0);

      position.assign(0.0);

      vBody.assign(0.0);

      vWorld.assign(0.0);

      omegaBody.assign(0.0);

      acceleration.assign(0.0);
  }
  CheaterState_(const ContainerAllocator& _alloc)
    : orientation()
    , position()
    , vBody()
    , vWorld()
    , omegaBody()
    , acceleration()  {
  (void)_alloc;
      orientation.assign(0.0);

      position.assign(0.0);

      vBody.assign(0.0);

      vWorld.assign(0.0);

      omegaBody.assign(0.0);

      acceleration.assign(0.0);
  }



   typedef boost::array<float, 4>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef boost::array<float, 3>  _vBody_type;
  _vBody_type vBody;

   typedef boost::array<float, 3>  _vWorld_type;
  _vWorld_type vWorld;

   typedef boost::array<float, 3>  _omegaBody_type;
  _omegaBody_type omegaBody;

   typedef boost::array<float, 3>  _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> const> ConstPtr;

}; // struct CheaterState_

typedef ::unitree_legged_msgs::CheaterState_<std::allocator<void> > CheaterState;

typedef boost::shared_ptr< ::unitree_legged_msgs::CheaterState > CheaterStatePtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::CheaterState const> CheaterStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::CheaterState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::CheaterState_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::CheaterState_<ContainerAllocator2> & rhs)
{
  return lhs.orientation == rhs.orientation &&
    lhs.position == rhs.position &&
    lhs.vBody == rhs.vBody &&
    lhs.vWorld == rhs.vWorld &&
    lhs.omegaBody == rhs.omegaBody &&
    lhs.acceleration == rhs.acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::CheaterState_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::CheaterState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8cc1254d33feda52dbc17fc7e4c7459";
  }

  static const char* value(const ::unitree_legged_msgs::CheaterState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8cc1254d33feda5ULL;
  static const uint64_t static_value2 = 0x2dbc17fc7e4c7459ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/CheaterState";
  }

  static const char* value(const ::unitree_legged_msgs::CheaterState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] orientation\n"
"float32[3] position\n"
"float32[3] vBody\n"
"float32[3] vWorld\n"
"float32[3] omegaBody\n"
"float32[3] acceleration\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::CheaterState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orientation);
      stream.next(m.position);
      stream.next(m.vBody);
      stream.next(m.vWorld);
      stream.next(m.omegaBody);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheaterState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::CheaterState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::CheaterState_<ContainerAllocator>& v)
  {
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "vBody[]" << std::endl;
    for (size_t i = 0; i < v.vBody.size(); ++i)
    {
      s << indent << "  vBody[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vBody[i]);
    }
    s << indent << "vWorld[]" << std::endl;
    for (size_t i = 0; i < v.vWorld.size(); ++i)
    {
      s << indent << "  vWorld[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vWorld[i]);
    }
    s << indent << "omegaBody[]" << std::endl;
    for (size_t i = 0; i < v.omegaBody.size(); ++i)
    {
      s << indent << "  omegaBody[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.omegaBody[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acceleration[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_CHEATERSTATE_H
